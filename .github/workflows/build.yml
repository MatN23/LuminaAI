name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test Python scripts
      run: |
        # Test if scripts can be imported without errors
        python -c "import train; print('‚úÖ train.py imports successfully')"
        python -c "import fine_tune; print('‚úÖ fine_tune.py imports successfully')"
        python -c "import ChatAI; print('‚úÖ ChatAI.py imports successfully')"
        python -c "import buildapp; print('‚úÖ buildapp.py imports successfully')"
        python -c "import lumina_desktop; print('‚úÖ lumina_desktop.py imports successfully')"
        
        # Run any existing tests
        if [ -f "tests/test_*.py" ]; then
          pytest tests/ -v --cov=./ --cov-report=xml
        else
          echo "No tests found, skipping pytest"
        fi

  test-electron:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Node dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint || echo "No lint script found"
    
    - name: Build Electron app
      run: npm run build || npm run dist || echo "No build script found"
    
    - name: Test Electron app
      run: |
        # Basic smoke test
        npm test || echo "No test script found"

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-status:
    runs-on: ubuntu-latest
    needs: [test-python, test-electron, security-scan]
    if: always()
    steps:
    - name: Build Status
      run: |
        if [[ "${{ needs.test-python.result }}" == "success" && "${{ needs.test-electron.result }}" == "success" ]]; then
          echo "üéâ All tests passed!"
        else
          echo "‚ùå Some tests failed"
          exit 1
        fi