# ChatAI.py Documentation

## Overview
ChatAI.py is an advanced agentic AI system that combines conversational AI capabilities with autonomous task execution. It provides a word-level transformer model with built-in tools and reasoning capabilities.

## Key Features
- **Agentic AI System**: Autonomous task planning and execution
- **Conversational Interface**: Interactive chat with the AI
- **Built-in Tools**: File system operations, calculations, memory management, web search
- **Task Management**: Track and monitor autonomous tasks
- **Autonomous Mode**: Automatic task detection and execution

## Main Components

### 1. Agent Tools and Capabilities

#### AgentTool (Abstract Base Class)
Base class for all agent tools with standard interface:
- `name()`: Returns tool name
- `description()`: Returns tool description  
- `execute(**kwargs)`: Executes the tool with given parameters

#### Available Tools

**FileSystemTool**
- **Purpose**: File and directory operations
- **Actions**: read, write, list, exists
- **Usage**: Reading/writing files, listing directories
- **Example**: `tool.execute("read", path="document.txt")`

**CalculatorTool**
- **Purpose**: Mathematical calculations
- **Features**: Safe expression evaluation
- **Usage**: Basic arithmetic operations
- **Example**: `tool.execute(expression="2 + 3 * 4")`

**TaskMemoryTool**
- **Purpose**: Information storage across tasks
- **Actions**: store, retrieve, list, clear, log_task, get_history
- **Usage**: Persistent memory for the agent
- **Example**: `tool.execute("store", key="info1", value="data")`

**WebSearchTool**
- **Purpose**: Web search capabilities (simulated in MVP)
- **Features**: Query-based information retrieval
- **Usage**: Finding information online
- **Example**: `tool.execute(query="Python programming")`

### 2. Task Planning and Execution

#### Task Class
Represents individual tasks with properties:
- `id`: Unique task identifier
- `description`: Task description
- `status`: Current status (pending, in_progress, completed, failed)
- `steps`: List of execution steps
- `results`: Results from each step
- `created_at`: Creation timestamp

#### TaskPlanner
Plans and decomposes complex tasks:
- **Input**: Task description and available tools
- **Output**: List of actionable steps
- **Features**: Uses the language model for intelligent planning

### 3. Core Agent Class

#### WordLevelAgent
The main agentic AI class that coordinates all components:

**Key Methods:**
- `execute_task(task_description, auto_plan=True)`: Execute a task autonomously
- `list_capabilities()`: Show available tools and capabilities
- `get_task_status(task_id)`: Check status of specific task
- `list_tasks()`: List all active and completed tasks

**Features:**
- Automatic task planning
- Step-by-step execution
- Error handling and recovery
- Progress tracking and logging

### 4. Chat Interface

#### AgenticWordAIChat
Interactive chat interface with agentic capabilities:

**Modes:**
- **Normal Chat**: Standard conversational AI
- **Autonomous Mode**: Automatic task detection and execution
- **Manual Task Mode**: Explicit task commands

**Commands:**
- `/task <description>`: Execute specific task
- `/auto on/off`: Toggle autonomous mode
- `/tasks`: List all tasks
- `/status <task_id>`: Check task status
- `/capabilities`: Show agent capabilities
- `/clear`: Clear conversation history
- `/exit`: Exit the chat

## Usage Examples

### Starting the System
```bash
python ChatAI.py
```

### Basic Chat
```
ðŸ§‘ You: Hello! How are you?
ðŸ¤– AI: Hello! I'm doing well and ready to help you with tasks or conversation.
```

### Manual Task Execution
```
ðŸ§‘ You: /task Calculate the square root of 144
ðŸŽ¯ Executing task: Calculate the square root of 144
ðŸ“Š Task task_1 completed
ðŸ¤– AI: I've successfully completed your task! I executed 1 steps.
```

### Autonomous Mode
```
ðŸ§‘ You: /auto on
ðŸ§  Autonomous mode enabled - I'll execute tasks automatically!

ðŸ§‘ You: Please create a file called notes.txt with some sample content
ðŸ§  I detect this is a task - executing autonomously...
ðŸ“Š Task task_2 completed
ðŸ¤– AI: I've successfully completed your task! I executed 2 steps.
```

### Task Management
```
ðŸ§‘ You: /tasks
ðŸ“‹ Active Tasks: 0
âœ… Recent Completed Tasks: 2
   â€¢ task_1: Calculate the square root of 144 (completed)
   â€¢ task_2: Please create a file called notes.txt with some sample content (completed)
```

## Configuration and Setup

### Prerequisites
- Trained word-level transformer model
- Python dependencies: torch, logging, re, gc, json, os, time, requests
- Model files in the `models/` directory

### Initialization
The system automatically:
1. Loads the best available model
2. Initializes all agent tools
3. Sets up the task planner
4. Starts the interactive chat

### Device Support
- **CUDA**: GPU acceleration for faster processing
- **MPS**: Apple Silicon optimization
- **CPU**: Fallback for systems without GPU

## Technical Architecture

### Model Integration
- Uses WordTransformer for language understanding and generation
- WordTokenizer for text processing
- ModelManager for model loading and management

### Memory Management
- Automatic memory cleanup after tool execution
- Conversation history management (limited to last 20 exchanges)
- Efficient token generation with top-k sampling

### Error Handling
- Graceful recovery from tool execution failures
- Task status tracking for debugging
- Comprehensive logging throughout the system

### Security Considerations
- Safe expression evaluation in calculator tool
- File system access restrictions
- Input validation and sanitization

## Advanced Features

### Task Planning Intelligence
The system uses the language model to intelligently break down complex tasks:
- Analyzes task description
- Identifies required tools
- Creates step-by-step execution plan
- Handles dependencies between steps

### Conversational Memory
- Maintains conversation context
- References previous tasks and results
- Provides coherent multi-turn conversations

### Progress Monitoring
- Real-time task execution feedback
- Detailed logging of all operations
- Performance metrics and timing

## Troubleshooting

### Common Issues
1. **No models available**: Run `python Train.py` first
2. **Out of memory**: Reduce batch size or use CPU mode
3. **Tool execution failures**: Check file permissions and paths
4. **Poor response quality**: Retrain model with more data

### Debug Mode
Enable detailed logging by setting the logging level to DEBUG in the script.

### Performance Optimization
- Use GPU acceleration when available
- Limit conversation history length
- Regular memory cleanup during long sessions

## Extension Points

### Adding New Tools
1. Inherit from `AgentTool` base class
2. Implement required methods: `name()`, `description()`, `execute()`
3. Add to the agent's tool dictionary
4. Update step execution logic to handle new tool

### Custom Task Planning
- Modify `TaskPlanner.plan_task()` for specialized domains
- Add domain-specific prompts and logic
- Implement custom step parsing for complex workflows

### Integration with External APIs
- Extend WebSearchTool with real API calls
- Add database connectivity tools
- Implement cloud service integrations

This agentic AI system represents a significant advancement in autonomous task execution combined with natural conversation capabilities.